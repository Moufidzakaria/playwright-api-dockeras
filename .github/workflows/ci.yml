name: CI/CD Pipeline

# Déclencheurs du workflow
on:
  push:
    branches: [ "main" ]  # Se déclenche sur les pushes vers main
  pull_request:
    branches: [ "main" ]  # Se déclenche sur les PRs vers main

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Machine virtuelle Ubuntu

    # Services nécessaires (ici PostgreSQL)
    services:
      postgres:
        image: postgres:17  # Image Docker PostgreSQL
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432  # Exposition du port
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Étapes du job
    steps:
      # Étape 1: Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2: Installation de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'  # Cache des dépendances npm

      # Étape 3: Installation des dépendances
      - name: Install dependencies
        run: npm install

      # Étape 4: Exécution des tests unitaires
      - name: Run backend unit tests
        run: npm test
     

      # Étape 5: Démarrage du serveur
      - name: Start backend server
        run: npm start &
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
          PORT: 3000

      # Étape 6: Installation de Playwright
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Étape 7: Exécution des tests Playwright
      - name: Run Playwright tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:3000

  # Second job: Construction et push de l'image Docker
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test  # Dépend du premier job

    steps:
      # Étape 1: Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Étape 2: Login au GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }}  # Token automatique

      # Étape 3: Construction et push de l'image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}/playwright-api-docker:latest
